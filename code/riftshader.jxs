<jittershader name="riftshader">
	<param name="uvScaleAndOffset" type="vec4" default="0.32 0.23 0.5 0.5" />
	<param name="dim" type="vec2" default="2048. 2048." />
	<param name="scene" type="int" default="0" />
	<language name="glsl" version="1.0">
		<bind param="uvScaleAndOffset" program="vp" />
		<bind param="dim" program="vp" />
		<bind param="scene" program="fp" />
		<program name="vp" type="vertex">
<![CDATA[

uniform vec4 uvScaleAndOffset;
uniform vec2 dim;

varying vec2 texcoordR, texcoordG, texcoordB;
varying float VignetteFactor;

vec2 convertTexCoord(vec2 texcoord) {
	// Vertex inputs are in TanEyeAngle space for the R,G,B channels (i.e. after chromatic
	// aberration and distortion). These are now "real world" vectors in direction (x,y,1)
	// relative to the eye of the HMD.  Apply the 3x3 timewarp rotation to these vectors.
	//vec3 v = vec3( rotMat * vec4(texcoord.xy, 1., 1.) );
	// Project them back onto the Z=1 plane of the rendered images.
	//vec2 flattened = (v.xy / v.z);
	
	vec2 flattened = texcoord.xy;
	
	// Scale into UV lookup space (depending on eye)
	flattened = (uvScaleAndOffset.xy * flattened + uvScaleAndOffset.zw);
	
	// as usual, OpenGL textures are upside down
	flattened.y = 1. - flattened.y;
	
	// scale up to tex dim because Jitter prefers Sampler2DRect:
	return flattened * dim;
}

void main (void){
	// position is already in viewport space:
	gl_Position = gl_ModelViewMatrix * vec4(gl_Vertex.xy, 0.5, 1.0);
	
	// these texture coordinates appear to be in -1,1 range... is that right?
    texcoordR   = convertTexCoord(gl_MultiTexCoord0.xy); 
    texcoordG	= convertTexCoord(gl_Color.rg);
    texcoordB	= convertTexCoord(gl_Color.ba);
    
    VignetteFactor 	= gl_Normal.x;
    //float TimeWarpFactor = gl_Normal.y;
}
]]>		
		</program>
		<program name="fp" type="fragment">
<![CDATA[

uniform sampler2DRect scene;

varying vec2 texcoordR, texcoordG, texcoordB;
varying float VignetteFactor;

void main (void) {
	// use separate texcoords to counter chromatic aberration:
    gl_FragColor.r = texture2DRect(scene, texcoordR).r;
    gl_FragColor.g = texture2DRect(scene, texcoordG).g;
    gl_FragColor.b = texture2DRect(scene, texcoordB).b;
    gl_FragColor.a = 1.;
    
    // apply smooth edge blend:
   	gl_FragColor *= VignetteFactor;
   	
}

]]>		
		</program>		
	</language>
</jittershader>
